#ifndef ALU_H
#define ALU_H
#include "module.h"

class ALU: public Module
{
public:

  enum Input {
    D0, D1, D2, D3, D4, D5, D6, D7, // input data
    DEC,
    N_INPUT,

    DATA_IN = Module::mask(D0, D1, D2, D3, D4, D5, D6, D7),
  };

  enum Output {
    Q0, Q1, Q2, Q3, Q4, Q5, Q6, Q7, // output data
    N_OUTPUT,

    DATA_OUT = Module::mask(Q0, Q1, Q2, Q3, Q4, Q5, Q6, Q7),
  };

  
  ALU()
  {
    setDecEnabled(false);
  }

  virtual int numberOfInputs() const override {
    return N_INPUT;
  };

  virtual int numberOfOutputs() const override {
    return N_OUTPUT;
  };

  virtual void update() override
  {
    unsigned long valueAtInput = Module::input(DATA_IN);
    Module::setOutput(valueAtInput + (decEnabled() ? -1 : 1));
  }

  virtual bool canBeClocked() const override
  {
    return false;
  }
  
  void setDecEnabled(bool const en)
  {
    if (en)
      Module::tieInputToHigh(mask(DEC));
    else
      Module::tieInputToLow(mask(DEC));
  }
  
  bool decEnabled()
  {
    return Module::inputByIndex(DEC);
  }
  
};


#endif // ALU_H
